- name: Install necessary packages
  ansible.builtin.apt:
    name:
      - sudo
      - python3-proxmoxer
      - python3-pip
      - jq
    update_cache: false

- name: Create user {{ proxmox.api.user.name }}
  ansible.builtin.user:
    name: "{{ proxmox.api.user.name }}"
    shell: '/bin/bash'

- name: Add Ansible ssh key
  ansible.builtin.authorized_key:
    user: "{{ proxmox.api.user.name }}"
    key: "{{ lookup('file', '/home/{{ proxmox.api.user.name }}/.ssh/id_rsa.pub') }}" 

- name: Add {{ proxmox.api.user.name }} to sudo
  ansible.builtin.user:
    name: "{{ proxmox.api.user.name }}"
    groups: sudo
    append: true
    state: present
    createhome: true

- name: Make sudo without password for {{ proxmox.api.user.name }}
  ansible.builtin.copy:
    dest: /etc/sudoers.d/80-ansible-sudo-user
    content: "{{ proxmox.api.user.name }} ALL=(ALL) NOPASSWD:ALL"
    mode: 0440

- name: Retrieve registered users in Proxmox API
  ansible.builtin.command: >
    pvesh ls /access/users --output-format=json
  register: pve_user_output

- name: Retrieve registered users in Proxmox API
  ansible.builtin.command: >
    pvesh ls /access/users --output-format=json
  register: pve_user_output
  
- name: Register existing users
  ansible.builtin.set_fact:
    pve_existing_users: "{{ pve_user_output.stdout | from_json | map(attribute='name') }}"
    pve_desired_user: "{{ proxmox.api.user.name }}@pam"

- name: Add user to Proxmox API
  ansible.builtin.command: >
    pvesh create /access/users --userid {{ pve_desired_user }}
  when: pve_desired_user not in pve_existing_users

- name: Retrieve registered api tokens in Proxmox API
  ansible.builtin.command: >
    pvesh get /access/users/{{ pve_desired_user }}/token --output-format=json
  register: pve_token_output

- name: Register existing tokens
  ansible.builtin.set_fact:
    pve_existing_tokens: "{{ pve_token_output.stdout | from_json | map(attribute='tokenid') }}"
    pve_token_id: "{{ proxmox.api.token.id | default('ansible') }}"

- name: Add api token for user
  ansible.builtin.command: >
    pvesh create /access/users/{{ pve_desired_user }}/token/{{ pve_token_id }} -privsep 0 --output-format=json
  when: pve_token_id not in pve_existing_tokens
  register: pve_created_token_output

- name: Register created token
  ansible.builtin.set_fact:
    pve_created_token: "{{ (pve_created_token_output.stdout | from_json)['value'] }}"
  when: pve_token_id not in pve_existing_tokens

- name: Print newly created token
  ansible.builtin.debug:
    msg: "{{ pve_created_token }}"
  when: pve_token_id not in pve_existing_tokens 