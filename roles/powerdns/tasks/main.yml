- name: Try to install powerdns packages
  become: true
  block:
    - name: Update apt packages
      ansible.builtin.apt:
        cache_valid_time: 7200
        update_cache: true

    - name: Upgrade apt packages
      ansible.builtin.apt:
        upgrade: "yes"

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - mariadb-server
          - mariadb-client
          - python3-mysqldb # Try to use the host to perform db operations
          - pdns-server
          - pdns-recursor
          - pdns-backend-mysql

- name: Try to configure the database for powerdns
  become: true
  block:
    - name: Update mysql root password
      community.mysql.mysql_user:
        name: root
        password: "{{ powerdns.db.root.password }}"
        login_user: root
        login_password: "{{ powerdns.db.root.password }}"
        check_implicit_admin: true
        column_case_sensitive: false
        priv: "*.*:ALL,GRANT"
        state: present

    - name: "Create a new databases with name {{ powerdns.db.name }}"
      community.mysql.mysql_db:
        name:
          - "{{ powerdns.db.name }}"
        login_user: root
        login_password: "{{ powerdns.db.root.password }}"
        state: present

    - name: Create user with all database privileges on {{ powerdns.db.name }} 
      community.mysql.mysql_user:
        name: "{{ powerdns.db.user.name }}"
        password: "{{ powerdns.db.user.password }}"
        priv: "{{ powerdns.db.name }}.*:ALL"
        login_user: root
        login_password: "{{ powerdns.db.root.password }}"
        column_case_sensitive: false
        state: present

    - name: Collect info about databases
      community.mysql.mysql_info:
        login_user: "{{ powerdns.db.user.name }}"
        login_password: "{{ powerdns.db.user.password }}"
        filter:
        - databases
      register: databases

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: pda.sql
        dest: /tmp/pda.sql
        mode: '0777'

    - name: Create all necessary tables
      community.mysql.mysql_db:
        name: "{{ powerdns.db.name }}"
        target: /tmp/pda.sql
        login_user: root
        login_password: "{{ powerdns.db.root.password }}"
        force: true
        state: import

- name: Try to further configure the system to enable powerdns
  become: true
  delegate_to: "{{ host.ipv4 }}"
  block:
    - name: Disable systemd-resolved 
      ansible.builtin.systemd_service:
        state: stopped
        enabled: false
        name: systemd-resolved

    - name: Update resolve config  
      ansible.builtin.template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
        mode: '0644'

    - name: Create a mysql backend config
      ansible.builtin.template:
        src: local.gmysql.conf.j2
        dest: /etc/powerdns/pdns.d/local.gmysql.conf
        mode: '0777'

    - name: Overwrite default recursor config
      ansible.builtin.template:
        src: recursor.conf.j2
        dest: /etc/powerdns/recursor.conf
        mode: '0777'

    - name: Create a pdns local server config
      ansible.builtin.template:
        src: local.server.conf.j2
        dest: /etc/powerdns/pdns.d/local.server.conf
        mode: '0777'

    - name: Create a pdns local recursor config
      ansible.builtin.template:
        src: local.recursor.conf.j2
        dest: /etc/powerdns/recursor.d/local.recursor.conf
        mode: '0777'

    - name: restart powerdns recursor
      ansible.builtin.systemd_service:
        state: restarted
        name: pdns-recursor
    
    - name: Restart powerdns server
      ansible.builtin.systemd_service:
        state: restarted
        name: pdns

- name: Setup base domain as zone
  become: true
  delegate_to: "{{ host.ipv4 }}"
  when: powerdns.domain is defined
  ansible.builtin.command: >
    pdnsutil create-zone "{{ powerdns.domain }}"
